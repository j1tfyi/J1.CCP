name: Deploy

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Node 20.18+ (fixes Solana engine guards)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.x'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: |
            bridge-react-app/package-lock.json
            package-lock.json

      # 3) Ensure dirs exist
      - name: Ensure directories
        run: |
          mkdir -p bridge-react-app/src
          mkdir -p bridge-react-app/public

      # 4) Create only the secret-sourced files that actually use secrets.
      #    If SW/MANIFEST secrets are ever added later, we allow them to override repo files.
      - name: Create sensitive files (conditional)
        shell: bash
        run: |
          set -euo pipefail

          # Pull secrets (may be empty)
          MAIN_TS_BASE64="${{ secrets.MAIN_TS_BASE64 }}"
          BRIDGE_JSX_BASE64="${{ secrets.BRIDGE_JSX_BASE64 }}"
          APP_JSX_BASE64="${{ secrets.APP_JSX_BASE64 }}"
          SERVICE_WORKER_BASE64="${{ secrets.SERVICE_WORKER_BASE64 }}"
          MANIFEST_BASE64="${{ secrets.MANIFEST_BASE64 }}"

          # Required ones (these you were already using)
          if [ -z "${MAIN_TS_BASE64:-}" ]; then echo "❌ Missing MAIN_TS_BASE64"; exit 1; fi
          if [ -z "${BRIDGE_JSX_BASE64:-}" ]; then echo "❌ Missing BRIDGE_JSX_BASE64"; exit 1; fi
          if [ -z "${APP_JSX_BASE64:-}" ]; then echo "❌ Missing APP_JSX_BASE64"; exit 1; fi

          # Decode required files
          printf '%s' "$MAIN_TS_BASE64"    | base64 -d > main.ts
          printf '%s' "$BRIDGE_JSX_BASE64" | base64 -d > bridge-react-app/src/useBridge.jsx
          printf '%s' "$APP_JSX_BASE64"    | base64 -d > bridge-react-app/src/App.jsx

          # For SW/manifest: prefer secrets if provided, otherwise keep repo files
          if [ -n "${SERVICE_WORKER_BASE64:-}" ]; then
            printf '%s' "$SERVICE_WORKER_BASE64" | base64 -d > service-worker.js
          else
            echo "ℹ️ SERVICE_WORKER_BASE64 not set; using repo service-worker.js"
          fi

          if [ -n "${MANIFEST_BASE64:-}" ]; then
            printf '%s' "$MANIFEST_BASE64" | base64 -d > site.webmanifest
          else
            echo "ℹ️ MANIFEST_BASE64 not set; using repo site.webmanifest"
          fi

      # 5) Verify all files (repo copies must exist and be non-empty)
      - name: Verify files exist and are non-empty
        run: |
          echo "Verifying files exist and are non-empty:"
          test -s main.ts
          test -s bridge-react-app/src/useBridge.jsx
          test -s bridge-react-app/src/App.jsx
          test -s service-worker.js
          test -s site.webmanifest
          ls -l main.ts service-worker.js site.webmanifest

      # 6) Install Solana deps (frontend)
      - name: Install Solana packages
        working-directory: bridge-react-app
        run: |
          npm install @solana/wallet-adapter-react @solana/wallet-adapter-react-ui @solana/wallet-adapter-base @solana/web3.js

      # 7) Build frontend
      - name: Build React app
        working-directory: bridge-react-app
        run: |
          npm install
          npx update-browserslist-db@latest --yes || true
          npm run build

      # 8) Inspect build output
      - name: Verify Build Output
        run: |
          echo "Build output:"
          find bridge-react-app/dist -maxdepth 2 -type f -printf "%P\n" | sort | head -n 200

      # 8.5) Auto-sync build output into service-worker.js
      - name: Sync SW hashed asset names
        shell: bash
        run: |
          set -euo pipefail
          js_path=$(ls -1t bridge-react-app/dist/assets/main-*.js  | head -n1 || true)
          css_path=$(ls -1t bridge-react-app/dist/assets/main-*.css | head -n1 || true)
          if [ -z "${js_path}" ] || [ -z "${css_path}" ]; then
            echo "❌ Could not find built main-*.js or main-*.css in dist/assets"
            ls -al bridge-react-app/dist/assets || true
            exit 1
          fi
          JS_FILE="/assets/$(basename "${js_path}")"
          CSS_FILE="/assets/$(basename "${css_path}")"
          echo "Detected JS:  ${JS_FILE}"
          echo "Detected CSS: ${CSS_FILE}"
          sed -i -E "s#'/assets/[^']+\\.js'#'${JS_FILE}'#g" service-worker.js
          sed -i -E "s#'/assets/[^']+\\.css'#'${CSS_FILE}'#g" service-worker.js
          echo "Updated service-worker.js lines:"
          grep -nE "'/assets/.*\\.(js|css)'" service-worker.js

      # 9) Deploy to Deno Deploy
      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "j1tfyi-ccp"
          entrypoint: "./main.ts"
          include: |
            main.ts
            deno.json
            deps.client.ts
            deps.server.ts
            bridge-react-app/dist/**/*
            service-worker.js
            site.webmanifest
        env:
          DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}

      # 10) Cleanup
      - name: Cleanup
        if: always()
        run: |
          rm -f main.ts
          rm -f bridge-react-app/src/useBridge.jsx
          rm -f bridge-react-app/src/App.jsx
          # keep repo copies of SW & manifest; they are part of the codebase
