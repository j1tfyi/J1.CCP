name: Deploy
on: [push]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Debug environment
        run: |
          echo "Node version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Working directory:"
          pwd

      - name: Debug secrets presence
        run: |
          echo "Checking if secrets are present:"
          if [ -n "${{ secrets.APP_JSX_BASE64 }}" ]; then
            echo "APP_JSX_BASE64 is set"
          else
            echo "APP_JSX_BASE64 is empty"
          fi
          
          if [ -n "${{ secrets.BRIDGE_JSX_BASE64 }}" ]; then
            echo "BRIDGE_JSX_BASE64 is set"
          else
            echo "BRIDGE_JSX_BASE64 is empty"
          fi
          
          if [ -n "${{ secrets.MAIN_TS_BASE64 }}" ]; then
            echo "MAIN_TS_BASE64 is set"
          else
            echo "MAIN_TS_BASE64 is empty"
          fi
          
          # Test base64 decoding (without showing content)
          echo "Testing base64 decoding:"
          echo "${{ secrets.APP_JSX_BASE64 }}" | base64 -d > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "APP_JSX_BASE64 is valid base64"
          else
            echo "APP_JSX_BASE64 is not valid base64"
          fi

      - name: Create sensitive files
        run: |
          # Create directories if they don't exist
          mkdir -p bridge-react-app/src
          
          # Create files with verbose error handling
          echo "Creating main.ts..."
          if ! echo "${{ secrets.MAIN_TS_BASE64 }}" | base64 -d > main.ts 2>main.ts.error; then
            echo "Error creating main.ts:"
            cat main.ts.error
            exit 1
          fi
          
          echo "Creating useBridge.jsx..."
          if ! echo "${{ secrets.BRIDGE_JSX_BASE64 }}" | base64 -d > bridge-react-app/src/useBridge.jsx 2>useBridge.jsx.error; then
            echo "Error creating useBridge.jsx:"
            cat useBridge.jsx.error
            exit 1
          fi
          
          echo "Creating App.jsx..."
          if ! echo "${{ secrets.APP_JSX_BASE64 }}" | base64 -d > bridge-react-app/src/App.jsx 2>app.jsx.error; then
            echo "Error creating App.jsx:"
            cat app.jsx.error
            exit 1
          fi
          
          # Verify file creation
          echo "Verifying files (sizes only):"
          wc -c main.ts bridge-react-app/src/useBridge.jsx bridge-react-app/src/App.jsx || echo "Failed to check file sizes"
          
          # Set proper permissions
          chmod 644 main.ts bridge-react-app/src/useBridge.jsx bridge-react-app/src/App.jsx

      - name: Install dependencies
        working-directory: bridge-react-app
        run: |
          npm install
          
          echo "Installed packages:"
          npm list --depth=0

      - name: Build React app
        working-directory: bridge-react-app
        run: |
          npm run build

      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "j1tfyi-portalapp"
          entrypoint: "./main.ts"
          include: |
            main.ts
            deno.json
            deps.client.ts
            deps.server.ts
            bridge-react-app/dist/**/*
        env:
          DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -f main.ts main.ts.error
          rm -f bridge-react-app/src/useBridge.jsx useBridge.jsx.error
          rm -f bridge-react-app/src/App.jsx app.jsx.error