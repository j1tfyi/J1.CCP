name: Deploy

on:
  push:
    branches: [ main ]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # 1) Checkout with LFS
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      # 2) Pull LFS files
      - name: Pull LFS files
        run: git lfs pull

      # 3) Node 20.18+ (fixes Solana engine guards)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.x'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            bridge-react-app/package-lock.json

      # 4) Ensure dirs exist
      - name: Ensure directories
        run: |
          mkdir -p bridge-react-app/src
          mkdir -p bridge-react-app/public
          mkdir -p src/pages
          mkdir -p src/components

      # 5) Create required secret-sourced files
      - name: Create sensitive files (required only)
        shell: bash
        run: |
          set -euo pipefail

          MAIN_TS_BASE64="${{ secrets.MAIN_TS_BASE64 }}"
          BRIDGE_JSX_BASE64="${{ secrets.BRIDGE_JSX_BASE64 }}"
          APP_JSX_BASE64="${{ secrets.APP_JSX_BASE64 }}"
          PORTAL_PAGE_BASE64="${{ secrets.PORTAL_PAGE_BASE64 }}"
          HOME_PAGE_BASE64="${{ secrets.HOME_PAGE_BASE64 }}"
          DEBRIDGE_PORTAL_BASE64="${{ secrets.DEBRIDGE_PORTAL_BASE64 }}"
          APP_CSS_BASE64="${{ secrets.APP_CSS_BASE64 }}"

          if [ -z "${MAIN_TS_BASE64:-}" ]; then echo "❌ Missing MAIN_TS_BASE64"; exit 1; fi
          if [ -z "${BRIDGE_JSX_BASE64:-}" ]; then echo "❌ Missing BRIDGE_JSX_BASE64"; exit 1; fi
          if [ -z "${APP_JSX_BASE64:-}" ]; then echo "❌ Missing APP_JSX_BASE64"; exit 1; fi
          if [ -z "${PORTAL_PAGE_BASE64:-}" ]; then echo "❌ Missing PORTAL_PAGE_BASE64"; exit 1; fi
          if [ -z "${HOME_PAGE_BASE64:-}" ]; then echo "❌ Missing HOME_PAGE_BASE64"; exit 1; fi
          if [ -z "${DEBRIDGE_PORTAL_BASE64:-}" ]; then echo "❌ Missing DEBRIDGE_PORTAL_BASE64"; exit 1; fi
          if [ -z "${APP_CSS_BASE64:-}" ]; then echo "❌ Missing APP_CSS_BASE64"; exit 1; fi

          printf '%s' "$MAIN_TS_BASE64"    | base64 -d > main.ts
          printf '%s' "$BRIDGE_JSX_BASE64" | base64 -d > bridge-react-app/src/useBridge.jsx
          printf '%s' "$APP_JSX_BASE64"    | base64 -d > bridge-react-app/src/App.jsx
          printf '%s' "$PORTAL_PAGE_BASE64" | base64 -d > src/pages/PortalPage.tsx
          # HomePage.tsx is compressed due to size
          printf '%s' "$HOME_PAGE_BASE64" | base64 -d | gunzip > src/pages/HomePage.tsx
          printf '%s' "$DEBRIDGE_PORTAL_BASE64" | base64 -d > src/components/DeBridgePortal.tsx
          printf '%s' "$APP_CSS_BASE64" | base64 -d > bridge-react-app/src/App.css

          # Minimal fallbacks if repo doesn't include these
          test -f service-worker.js  || echo "// noop sw" > service-worker.js
          test -f site.webmanifest   || echo '{"name":"J1.CCP","short_name":"J1.CCP","start_url":"/","display":"standalone","background_color":"#000","theme_color":"#000","icons":[]}' > site.webmanifest

          # Create stub sessionToken.ts for Deno Deploy (no subprocess support)
          test -f sessionToken.stub.ts && cp sessionToken.stub.ts sessionToken.ts || echo "export async function handleSessionRequest(req: Request): Promise<Response> { return new Response(JSON.stringify({error: 'Not available'}), {status: 501}); }" > sessionToken.ts

      # 6) Verify required files exist and are non-empty
      - name: Verify files exist and are non-empty
        run: |
          set -euo pipefail
          for f in main.ts bridge-react-app/src/useBridge.jsx bridge-react-app/src/App.jsx src/pages/PortalPage.tsx src/pages/HomePage.tsx src/components/DeBridgePortal.tsx bridge-react-app/src/App.css; do
            test -s "$f" || (echo "❌ Missing or empty $f" && exit 1)
          done
          ls -l service-worker.js || true
          ls -l site.webmanifest  || true

      # 7) Install & Build ROOT portal (wormhole lives here)
      - name: Install packages (root portal)
        run: |
          npm install --legacy-peer-deps
          # Ensure three is present (won't reinstall if already in package.json)
          npm install three --save --legacy-peer-deps || true

      - name: Build root portal
        env:
          VITE_COUNTERAPI_WORKSPACE: ${{ secrets.VITE_COUNTERAPI_WORKSPACE }}
          VITE_COUNTERAPI_COUNTER: ${{ secrets.VITE_COUNTERAPI_COUNTER }}
          VITE_COUNTERAPI_ACCESS_TOKEN: ${{ secrets.VITE_COUNTERAPI_ACCESS_TOKEN }}
        run: |
          # Prefer your script if defined; fallback to vite if present
          if npm run | grep -qE '^  build'; then
            npm run build
          else
            npx vite build
          fi
          # Copy video files to dist
          cp public/*.mp4 dist/ 2>/dev/null || true
          cp public/*.mov dist/ 2>/dev/null || true
          cp public/*.webm dist/ 2>/dev/null || true

      # 8) Install & Build BRIDGE app
      - name: Install packages (bridge app)
        working-directory: bridge-react-app
        run: |
          npm install --legacy-peer-deps
          # Explicitly ensure deps you use at runtime
          npm install three @solana/wallet-adapter-react @solana/wallet-adapter-react-ui @solana/wallet-adapter-base @solana/web3.js --save --legacy-peer-deps

      - name: Build bridge app
        working-directory: bridge-react-app
        run: |
          npx update-browserslist-db@latest --yes || true
          if npm run | grep -qE '^  build'; then
            npm run build
          else
            npx vite build
          fi

      # 9) Inspect build outputs
      - name: Verify Build Output (root & bridge)
        run: |
          echo "Root portal dist/:"
          (find dist -maxdepth 2 -type f -printf "%P\n" | sort | head -n 200) 2>/dev/null || echo "no root dist/"
          echo
          echo "Bridge dist/:"
          (find bridge-react-app/dist -maxdepth 2 -type f -printf "%P\n" | sort | head -n 200) 2>/dev/null || echo "no bridge dist/"

      # 10) (Tolerant) Auto-sync hashed assets into service-worker.js if pattern matches
      - name: Sync SW hashed asset names (tolerant)
        shell: bash
        run: |
          set -euo pipefail
          js_path=$(ls -1t bridge-react-app/dist/assets/main-*.js 2>/dev/null | head -n1 || true)
          css_path=$(ls -1t bridge-react-app/dist/assets/main-*.css 2>/dev/null | head -n1 || true)
          if [ -z "${js_path}" ] || [ -z "${css_path}" ]; then
            echo "⚠️ Could not find main-*.{js,css}; skipping SW rewrite"
            exit 0
          fi
          JS_FILE="/assets/$(basename "${js_path}")"
          CSS_FILE="/assets/$(basename "${css_path}")"
          echo "Detected JS:  ${JS_FILE}"
          echo "Detected CSS: ${CSS_FILE}"
          sed -i -E "s#'/assets/[^']+\\.js'#'${JS_FILE}'#g" service-worker.js || true
          sed -i -E "s#'/assets/[^']+\\.css'#'${CSS_FILE}'#g" service-worker.js || true
          grep -nE "'/assets/.*\\.(js|css)'" service-worker.js || true

      # 11) Deploy to Deno Deploy (serve BOTH bundles)
      - name: Upload to Deno Deploy
        uses: denoland/deployctl@v1
        with:
          project: "j1tfyi-ccp"
          entrypoint: "./main.ts"
          include: |
            main.ts
            sessionToken.ts
            deno.json
            deps.client.ts
            deps.server.ts
            dist/**/*
            bridge-react-app/dist/**/*
            public/**/*
            service-worker.js
            site.webmanifest
        env:
          DENO_DEPLOY_TOKEN: ${{ secrets.DENO_DEPLOY_TOKEN }}

      # 12) Cleanup
      - name: Cleanup
        if: always()
        run: |
          rm -f main.ts
          rm -f bridge-react-app/src/useBridge.jsx
          rm -f bridge-react-app/src/App.jsx
          rm -f src/pages/PortalPage.tsx
          rm -f src/pages/HomePage.tsx
          rm -f src/components/DeBridgePortal.tsx
          rm -f bridge-react-app/src/App.css